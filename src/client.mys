from fiber import CancelledError
from fiber import Fiber
from fiber import sleep
from http import HttpError
from http import get as http_get
from json import JsonError
from json import Value as JsonValue
from json import decode as json_decode
from net import NetError
from websocket import WebsocketError
from websocket.client import Client as WebsocketClient
from . import Channel
from . import Message
from . import User

class DiscordError(Error):
    message: string

enum Op:
    Dispatch = 0
    Heartbeat = 1
    Identify = 2
    PresenceUpdate = 3
    VoiceStateUpdate = 4
    Resume = 6
    Reconnect = 7
    RequestGuildMembers = 8
    InvalidSession = 9
    Hello = 10
    HeartbeatAck = 11

class _HeartbeatFiber(Fiber):
    websocket: WebsocketClient
    heartbeat_interval: f64

    func run(self):
        try:
            while True:
                sleep(self.heartbeat_interval)
                self.websocket.send_text("{\"op\":1,\"d\":null}")
        except CancelledError:
            pass

trait Handler:

    func on_message(self, message: Message, client: Client):
        """Called when a data message is received.

        """

class Client:
    token: string
    me: User?
    _handler: Handler
    _websocket: WebsocketClient
    _heartbeat_fiber: _HeartbeatFiber?

    func __init__(self, token: string, handler: Handler):
        self.token = token
        self.me = None
        self._handler = handler
        self._heartbeat_fiber = None
        self._websocket = WebsocketClient(secure=True)

    func _read_packet(self) -> JsonValue?:
        message = self._websocket.receive_text()

        if message is None:
            return None

        return json_decode(message)

    func _connect(self):
        data = http_get("discord.com",
                        path="/api/v8/users/@me",
                        port=443,
                        secure=True,
                        headers={
                            "Authorization": f"Bot {self.token}"
                        }).content
        self.me = User(json_decode(string(data)).get("username").string())

        self._websocket.connect("gateway.discord.gg", 443, "/?v=8&encoding=json")

        packet = self._read_packet()
        heartbeat_interval = packet.get("d").get("heartbeat_interval").integer()
        self._websocket.send_text("{\"op\":2,\"d\":{"
                                  f"\"token\": \"{self.token}\","
                                  "\"intents\": 513,"
                                  "\"properties\": {"
                                  "\"$os\": \"linux\","
                                  "\"$browser\": \"mys\","
                                  "\"$device\": \"mys\""
                                  "}}}")

        self._heartbeat_fiber = _HeartbeatFiber(self._websocket,
                                                f64(heartbeat_interval) / 1000.0)
        self._heartbeat_fiber.start()

    func _handle_dispatch_message_create(self, data: JsonValue):
        user = User(data.get("author").get("username").string())
        channel_id = data.get("channel_id").string()
        channel = Channel(self, channel_id)
        message = Message(channel, user, data.get("content").string())
        self._handler.on_message(message, self)

    func _handle_dispatch(self, packet: JsonValue):
        name = packet.get("t").string()
        data = packet.get("d")

        match name:
            case "MESSAGE_CREATE":
                self._handle_dispatch_message_create(data)
            case _:
                pass

    func run(self):
        while True:
            self._connect()

            try:
                while True:
                    packet = self._read_packet()

                    if packet is None:
                        break

                    op = Op(packet.get("op").integer())

                    match op:
                        case Op.Dispatch:
                            self._handle_dispatch(packet)
                        case Op.HeartbeatAck:
                            pass
                        case Op.Reconnect:
                            pass
                        case _:
                            print(f"Unhandled op {op}.")
            finally:
                self._heartbeat_fiber.cancel()
                self._heartbeat_fiber.join()
                self._websocket.disconnect()
