from fiber import Fiber
from fiber import sleep
from json import Value as JsonValue
from json import decode as json_decode
from websocket.client import Client as WebsocketClient
from . import Message
from . import User
from . import Channel

@enum
class Op:
    Dispatch = 0
    Heartbeat = 1
    Identify = 2
    PresenceUpdate = 3
    VoiceStateUpdate = 4
    Resume = 6
    Reconnect = 7
    RequestGuildMembers = 8
    InvalidSession = 9
    Hello = 10
    HeartbeatAck = 11

class HeartbeatFiber(Fiber):
    _websocket: WebsocketClient
    _heartbeat_interval: f64
    _acked: bool

    def __init__(self, websocket: WebsocketClient, heartbeat_interval: f64):
        self._websocket = websocket
        self._heartbeat_interval = heartbeat_interval

    def run(self):
        while True:
            sleep(self._heartbeat_interval - 5.0)
            self._websocket.send_text("{\"op\":1,\"d\":null}")

@trait
class Handler:

    def on_message(self, message: Message, client: Client):
        """Called when a data message is received.

        """

class Client:
    user: User
    _handler: Handler
    _websocket: WebsocketClient
    _heartbeat_fiber: HeartbeatFiber

    def __init__(self, handler: Handler):
        self.user = User("TODO")
        self._handler = handler
        self._heartbeat_fiber = None
        self._websocket = WebsocketClient(secure=True)

    def _read_packet(self) -> JsonValue:
        message = self._websocket.receive_text()
        print(message)

        if message is None:
            return None

        return json_decode(message)

    def _connect(self, token: string) -> bool:
        self._websocket.connect("gateway.discord.gg", 443, "/?v=8&encoding=json")
        packet = self._read_packet()

        if packet is None:
            return False

        heartbeat_interval = (packet
                              .getitem1("d")
                              .getitem1("heartbeat_interval")
                              .get_integer())
        self._websocket.send_text("{\"op\":2,\"d\":{"
                                  f"\"token\": \"{token}\","
                                  "\"intents\": 513,"
                                  "\"properties\": {"
                                  "\"$os\": \"linux\","
                                  "\"$browser\": \"mys\","
                                  "\"$device\": \"mys\""
                                  "}}}")
        self._heartbeat_fiber = HeartbeatFiber(self._websocket,
                                               f64(heartbeat_interval) / 1000.0)
        self._heartbeat_fiber.start()

        return True

    def _handle_dispatch_message_create(self, data: JsonValue):
        user = User(data.getitem1("author").getitem1("username").get_string())
        channel = Channel()
        message = Message(channel,
                          user,
                          data.getitem1("content").get_string())
        self._handler.on_message(message, self)

    def _handle_dispatch(self, packet: JsonValue):
        name = packet.getitem1("t").get_string()
        data = packet.getitem1("d")

        match name:
            case "MESSAGE_CREATE":
                self._handle_dispatch_message_create(data)
            case _:
                print(f"Unhandled dispatch event '{name}'.")

    def run(self, token: string):
        while True:
            if not self._connect(token):
                print("Connect failed, trying again in 1 minute.")
                sleep(60.0)
                continue

            while True:
                packet = self._read_packet()

                if packet is None:
                    print("Connection closed.")
                    break

                op = Op(packet.getitem1("op").get_integer())

                match op:
                    case Op.Dispatch:
                        self._handle_dispatch(packet)
                    case _:
                        print(f"Unhandled op {op}.")
