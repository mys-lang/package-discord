from fiber import Fiber
from fiber import Event
from fiber import sleep
from . import Message
from . import User
from websocket.client import Client as WebsocketClient
from json import decode as json_decode
from json import Value as JsonValue

class HeartbeatFiber(Fiber):
    _websocket: WebsocketClient
    _heartbeat_interval: f64

    def __init__(self, websocket: WebsocketClient, heartbeat_interval: f64):
        self._websocket = websocket
        self._heartbeat_interval = heartbeat_interval

    def run(self):
        while True:
            sleep(self._heartbeat_interval - 5.0)
            self._websocket.send_text("{\"op\":1,\"d\":null}")

@trait
class Handler:

    def on_message(self, message: Message, client: Client):
        """Called when a data message is received.

        """

class Client:
    user: User
    _handler: Handler
    _websocket: WebsocketClient
    _heartbeat_fiber: HeartbeatFiber

    def __init__(self, handler: Handler):
        self.user = None
        self._handler = handler
        self._heartbeat_fiber = None
        self._websocket = WebsocketClient(secure=True)

    def _read_packet(self) -> JsonValue:
        message = self._websocket.receive_text()
        print(message)

        return json_decode(message)

    def run(self, token: string):
        while True:
            self._websocket.connect("gateway.discord.gg", 443, "/?v=8&encoding=json")

            while True:
                packet = self._read_packet()
                heartbeat_interval = (packet
                                      .getitem1("d")
                                      .getitem1("heartbeat_interval")
                                      .get_integer())
                self._websocket.send_text("{\"op\":2,\"d\":{"
                                          f"\"token\": \"{token}\","
                                          "\"intents\": 513,"
                                          "\"properties\": {"
                                          "\"$os\": \"linux\","
                                          "\"$browser\": \"mys\","
                                          "\"$device\": \"mys\""
                                          "}}}")
                self._heartbeat_fiber = HeartbeatFiber(
                    self._websocket,
                    f64(heartbeat_interval) / 1000.0)
                self._heartbeat_fiber.start()

                while True:
                    packet = self._read_packet()

                    if packet is None:
                        print("connection closed")
                        return

                    op = packet.getitem1("op").get_integer()

                    match op:
                        case 11:
                            print("Heartbeat ack.")
                        case _:
                            print(f"Unhandled op {op}")
